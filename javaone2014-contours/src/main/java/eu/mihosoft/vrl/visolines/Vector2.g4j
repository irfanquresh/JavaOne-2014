/**
 * Vector3d.java
 *
 * Copyright 2014-2014 Michael Hoffer <info@michaelhoffer.de>. All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY Michael Hoffer <info@michaelhoffer.de> "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL Michael Hoffer <info@michaelhoffer.de> OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of Michael Hoffer
 * <info@michaelhoffer.de>.
 */
package eu.mihosoft.vrl.visolines;

/**
 * 2d Vector.
 *
 * @author Michael Hoffer &lt;info@michaelhoffer.de&gt;
 */
class Vector2<<T>> {

    private static Vector2<<double>> dVec;
    private static Vector2<<float>> floatVec;
    private static Vector2<<int>> intVec;
    private static Vector2<<long>> longVec;

    public T x;
    public T y;

    public static final Vector2<<T>> ZERO = new Vector2<<T>>(0, 0);
    public static final Vector2<<T>> UNITY = new Vector2<<T>>(1, 1);
    public static final Vector2<<T>> X_ONE = new Vector2<<T>>(1, 0);
    public static final Vector2<<T>> Y_ONE = new Vector2<<T>>(0, 1);

        /**
     * Creates a new vector.
     *
     * @param x x value
     * @param y y value
     */
    public Vector2<<T>>() {

        this.x = 0;
        this.y = 0;
    }
    
    /**
     * Creates a new vector.
     *
     * @param x x value
     * @param y y value
     */
    public Vector2<<T>>(T x, T y) {

        this.x = x;
        this.y = y;
    }


    @Override
    public Vector2<<T>> clone() {
        return new Vector2<<T>>(x, y);
    }

    /**
     * Returns a negated copy of this vector.
     *
     * <b>Note:</b> this vector is not modified.
     *
     * @return a negated copy of this vector
     */
    public Vector2<<T>> negated() {
        return new Vector2<<T>>(-x, -y);
    }

    /**
     * Returns the sum of this vector and the specified vector.
     *
     * @param v the vector to add
     *
     * <b>Note:</b> this vector is not modified.
     *
     * @return the sum of this vector and the specified vector
     */
    public Vector2<<T>> plus(Vector2<<T>> v) {
        return new Vector2<<T>>(x + v.x, y + v.y);
    }

    /**
     * Returns the difference of this vector and the specified vector.
     *
     * @param v the vector to subtract
     *
     * <b>Note:</b> this vector is not modified.
     *
     * @return the difference of this vector and the specified vector
     */
    public Vector2<<T>> minus(Vector2<<T>> v) {
        return new Vector2<<T>>(x - v.x, y - v.y);
    }

    /**
     * Returns the product of this vector and the specified value.
     *
     * @param a the value
     *
     * <b>Note:</b> this vector is not modified.
     *
     * @return the product of this vector and the specified value
     */
    public Vector2<<T>> times(T a) {
        return new Vector2<<T>>(x * a, y * a);
    }

    /**
     * Returns the product of this vector and the specified vector.
     *
     * @param a the vector
     *
     * <b>Note:</b> this vector is not modified.
     *
     * @return the product of this vector and the specified vector
     */
    public Vector2<<T>> times(Vector2<<T>> a) {
        return new Vector2<<T>>(x * a.x, y * a.y);
    }

    /**
     * Returns this vector devided by the specified value.
     *
     * @param a the value
     *
     * <b>Note:</b> this vector is not modified.
     *
     * @return this vector devided by the specified value
     */
    public Vector2<<T>> dividedBy(T a) {
        return new Vector2<<T>>(x / a, y / a);
    }

    /**
     * Returns the dot product of this vector and the specified vector.
     *
     * <b>Note:</b> this vector is not modified.
     *
     * @param a the second vector
     *
     * @return the dot product of this vector and the specified vector
     */
    public T dot(Vector2<<T>> a) {
        return this.x * a.x + this.y * a.y;
    }

    /**
     * Linearly interpolates between this and the specified vector.
     *
     * <b>Note:</b> this vector is not modified.
     *
     * @param a vector
     * @param t interpolation value
     *
     * @return copy of this vector if {@code t = 0}; copy of a if {@code t = 1};
     * the point midway between this and the specified vector if {@code t = 0.5}
     */
    public Vector2<<T>> lerp(Vector2<<T>> a, T t) {
        return this.plus(a.minus(this).times(t));
    }

    /**
     * Returns the magnitude of this vector.
     *
     * <b>Note:</b> this vector is not modified.
     *
     * @return the magnitude of this vector
     */
    public T magnitude() {
        return (T)Math.sqrt(this.dot(this));
    }

    /**
     * Returns a normalized copy of this vector with length {@code 1}.
     *
     * <b>Note:</b> this vector is not modified.
     *
     * @return a normalized copy of this vector with length {@code 1}
     */
    public Vector2<<T>> normalized() {
        return this.dividedBy(this.magnitude());
    }

//    /**
//     * Returns the cross product of this vector and the specified vector.
//     *
//     * <b>Note:</b> this vector is not modified.
//     *
//     * @param a the vector
//     *
//     * @return the cross product of this vector and the specified vector.
//     */
//    public Vector2f cross(Vector2f a) {
//        return new Vector2f(
//                this.y * a.z - this.z * a.y,
//                this.z * a.x - this.x * a.z,
//                this.x * a.y - this.y * a.x
//        );
//    }


    @Override
    public String toString() {
        return "[" + x + ", " + y+"]";
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Vector2<<T>> other = (Vector2<<T>>) obj;
        if (this.x != other.x) {
            return false;
        }
        if (this.y !=other.y) {
            return false;
        }

        return true;
    }

    /**
     * Creates a new vector with specified {@code x}
     *
     * @param x x value
     * @return a new vector {@code [x,0]}
     *
     */
    public static Vector2<<T>> x(T x) {
        return new Vector2<<T>>(x, 0);
    }

    /**
     * Creates a new vector with specified {@code y}
     *
     * @param y y value
     * @return a new vector {@code [0,y]}
     *
     */
    public static Vector2<<T>> y(T y) {
        return new Vector2<<T>>(0, y);
    }


}
